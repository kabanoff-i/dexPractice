// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelsDb;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModelsDb.Migrations
{
    [DbContext(typeof(BankServiceContext))]
    [Migration("20230630232855_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModelsDb.Account", b =>
                {
                    b.Property<Guid>("accountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("clientId")
                        .HasColumnType("uuid");

                    b.Property<string>("currencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("accountNumber");

                    b.HasIndex("clientId");

                    b.HasIndex("currencyName");

                    b.ToTable("account");
                });

            modelBuilder.Entity("ModelsDb.Client", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("passportNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("client");
                });

            modelBuilder.Entity("ModelsDb.Currency", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<char>("symbol")
                        .HasColumnType("character(1)");

                    b.HasKey("code");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("ModelsDb.Employee", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("contract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("dateOfHire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("passportNumber")
                        .HasColumnType("text");

                    b.Property<int>("salary")
                        .HasColumnType("integer");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("ModelsDb.Account", b =>
                {
                    b.HasOne("ModelsDb.Client", "client")
                        .WithMany("accounts")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDb.Currency", "currency")
                        .WithMany("accounts")
                        .HasForeignKey("currencyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("currency");
                });

            modelBuilder.Entity("ModelsDb.Client", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("ModelsDb.Currency", b =>
                {
                    b.Navigation("accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
